name: Sample Workflow
on: [push]
jobs:
  First-job:
    runs-on: ubuntu-latest
    steps:
      - name: Set up coverlet
        run: dotnet tool install -g coverlet.console
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v1
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      # - name: Install SonarCloud scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: powershell
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      # - name: Build and analyze
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   shell: powershell
      #   run: |
      #     .\.sonar\scanner\dotnet-sonarscanner begin /k:"pallavipendyala_gtihub-action-test" /o:"pallavipendyala" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reposrtPaths="coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="TestResults\*.trx"
      #     dotnet build
      #     .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=pallavipendyala
            -Dsonar.projectKey=pallavipendyala_gtihub-action-test
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
    # steps:
    #   #- uses: actions/checkout@v1
    #   - name: "pulling git repos"
    #     run: |
    #         ls -a
    #         git init
    #         git remote add origin "https://${GITHUB_ACTOR}:${{secrets.PAT}}@github.com/${GITHUB_REPOSITORY}.git"
    #         git config --global user.email "Runner@mail.com"
    #         git config --global user.name "Runner Device"
    #         git fetch
    #         git checkout master
    #         git branch --set-upstream-to=origin/master
    #         git pull
    #         dotnet restore
    #         dotnet build
    #         dotnet publish
    #         git add -A
    #         git commit -m "commiting build file"
    #         git push -u origin master
    #         ls -a
    #     shell: bash

    #   # - name: "Building dotnet project"
    #   #   run: |
    #   #       pwd
    #   #       dotnet restore
    #   #       dotnet build
    #   #       dotnet publish
    #   # - name: list of files
    #   #   run: ls
    #   # - name: pushing the build file to repos
    #   #   run: |
    #   #       git remote add upstream "https://${GITHUB_ACTOR}:${{secrets.GITHHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git"
    #   #       git add -A
    #   #       git commit -m "commiting build file"
    #   #       git push -u origin master
    #   #   shell: bash